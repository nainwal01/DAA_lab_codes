#include <bits/stdc++.h>
using namespace std;
int comp = 0;
int invCount = 0;
void merge(vector<int>& v, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;
    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; i++)
        L[i] = v[left + i];
    
    for (int i = 0; i < n2; i++) 
        R[i] = v[mid + 1 + i];
    
    
    int i = 0, j = 0, k = left;
  
    while (i < n1 && j < n2) {
        comp++;
        if (L[i] <= R[j]) {
            v[k] = L[i];
            i++;
        } else {
            v[k] = R[j]; 
            j++;
            invCount += (n1 - i);
        }
        k++;
    }
  
    while (i < n1) v[k++] = L[i++];
    while (j < n2) v[k++] = R[j++];
}

void mergesort(vector<int>& v, int left, int right) {
    if (left >= right) return;
  
    int mid = (left + right) / 2;
    mergesort(v, left, mid);
    mergesort(v, mid + 1, right);
    merge(v, left, mid, right);
}

void solve() {
    int n;
    cin >> n;
    vector<int> v(n);
    
    for (int &i : v) {
        cin >> i;
    }

    invCount = 0;
    comp = 0;
    mergesort(v, 0, n - 1);

    for (int i : v) 
        cout << i << " ";
    
    cout << endl;
    
    cout << "Inversions: " << invCount << endl;
    cout << "Comparisons: " << comp << endl;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        solve();
    }
    return 0;
}
